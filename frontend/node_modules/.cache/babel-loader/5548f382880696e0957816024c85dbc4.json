{"ast":null,"code":"import React,{createContext,useContext,useRef,useState}from'react';const EqContext=createContext();export function useEq(){return useContext(EqContext);}export function EqProvider(_ref){let{children}=_ref;const mathFieldRef=useRef(null);const[eq,setEq]=useState(\"\");const tokens=new Set([\"{}={}\",\"{}\\\\gt{}\",\"{}\\\\ge{}\",\"{}\\\\lt{}\",\"{}\\\\le{}\",\"{}+{}\",\"{}-{}\",\"{}\\\\cdot{}\",\"{}\\\\div{}\",\"{}^{}\",\"{}_{}\",\"{}\\\\to{}\",\"\\\\frac{}{}\",\"\\\\frac{d}{d{}}{}\",\"\\\\partial{}\",\"\\\\lim_{}{}\",\"\\\\sqrt{}\",\"\\\\sqrt[{}]{}\",\"\\\\log{}\",\"\\\\log_{}{}\",\"\\\\binom{}{}\",\"\\\\sum_{}^{}{}\",\"\\\\prod_{}^{}{}\",\"\\\\int_{}^{}{}\",\"\\\\oint_{}^{}{}\",\"\\\\left({}\\\\right)\",\"\\\\left[{}\\\\right]\",\"\\\\left|{}\\\\right|\",\"\\\\left\\\\lfloor{}\\\\right\\\\rfloor\",\"\\\\left\\\\lceil{}\\\\right\\\\rceil\"]);function splitBranches(tree){for(var _len=arguments.length,operators=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){operators[_key-1]=arguments[_key];}const operator=operators[0];let new_tree,tree_flag,len,prev,char;for(let branch_index=tree.length-1;branch>=0;branch--){branch=tree[branch_index];if(typeof branch===\"string\"){new_tree=[],tree_flag=false,len=branch.length,prev=len;for(let i=len-1;i>=0;i--){char=branch[i];if(operators.includes(char)){new_branch.push(char,[],branch.slice(i+1,prev));new_branch=new_branch[1];prev=i;tree_flag=true;}}if(tree_flag){tree[branch_index]=new_tree;}}else{tree[branch_index]=splitBranches(branch);}}const expr=tree[0],operands=[];let operand_index=tree.length-1;new_tree=[],tree_flag=false,len=expr.length,prev=len;for(let i=len-1;i>=0;i--){char=expr[i];if(operators.includes(char)&&(i>len-5||expr.slice(i+1,i+5)!=\"{}{}\")){tree_flag=true;new_tree.push(char,[],operands?[expr.slice(i+1,prev),...operands]:expr.slice(i+1,prev));new_tree=new_tree[1];prev=i;operands=[];}else if(char===\"{\"){operands.unshift(tree[operand_index]);operand_index--;}}return tree_flag?new_tree:tree;}function generateTree(){const brace_stack=[],tree=[];let expr,brace_pairs,len,operands,last_is_num,last_is_alpha;for(let i=0;i<eq.length;i++){switch(eq[i]){case\"{\":brace_stack[brace_stack.length-1].push(i+1);brace_stack.push([i+1]);case\"}\":expr=\"\";brace_pairs=brace_stack.pop();brace_pairs.push(i);len=brace_pairs.length;operands=len>2;for(let j=0;j<len;j+=2){expr+=eq.slice(brace_pairs[j],brace_pairs[j+1]);}// for (let c = 0; c < expr.length; c++) {\n//   if \n// }\nif(operands){tree.splice(-operands,operands,[expr,...tree.slice(-operands)]);}else{if(!isNaN(expr)){expr=+expr;}tree.push(expr);}brace_stack[brace_stack.length-1].push(i);}}tree=splitBranches(tree,\"+\",\"-\");tree=splitBranches(tree,\"\\\\cdot\",\"\\\\div\");tree=splitBranches(tree,\"^\");return tree;}function writeLatex(latex){var _mathFieldRef$current;let isCmd=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let lcount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const mathField=mathFieldRef===null||mathFieldRef===void 0?void 0:(_mathFieldRef$current=mathFieldRef.current)===null||_mathFieldRef$current===void 0?void 0:_mathFieldRef$current.mathField;if(mathField){if(isCmd){mathField.cmd(latex);}else{mathField.typedText(latex);}mathField.keystoke(\"Left \".repeat(lcount));setEq(mathField.latex());}}return/*#__PURE__*/React.createElement(EqContext.Provider,{value:{mathFieldRef,writeLatex,eq,setEq}},children);}","map":{"version":3,"names":["React","createContext","useContext","useRef","useState","EqContext","useEq","EqProvider","_ref","children","mathFieldRef","eq","setEq","tokens","Set","splitBranches","tree","_len","arguments","length","operators","Array","_key","operator","new_tree","tree_flag","len","prev","char","branch_index","branch","i","includes","new_branch","push","slice","expr","operands","operand_index","unshift","generateTree","brace_stack","brace_pairs","last_is_num","last_is_alpha","pop","j","splice","isNaN","writeLatex","latex","_mathFieldRef$current","isCmd","undefined","lcount","mathField","current","cmd","typedText","keystoke","repeat","createElement","Provider","value"],"sources":["/Users/kirillrybkov/Desktop/diff-eq-visualiser/frontend/src/components/EqContext.js"],"sourcesContent":["import React, { createContext, useContext, useRef, useState } from 'react';\n\nconst EqContext = createContext();\n\nexport function useEq() {\n  return useContext(EqContext);\n}\n\nexport function EqProvider({ children }) {\n  const mathFieldRef = useRef(null);\n  const [eq, setEq] = useState(\"\");\n\n  const tokens = new Set([\n    \"{}={}\", \"{}\\\\gt{}\", \"{}\\\\ge{}\", \"{}\\\\lt{}\", \"{}\\\\le{}\",\n    \"{}+{}\", \"{}-{}\", \"{}\\\\cdot{}\", \"{}\\\\div{}\", \"{}^{}\", \"{}_{}\", \"{}\\\\to{}\",\n    \"\\\\frac{}{}\", \"\\\\frac{d}{d{}}{}\", \"\\\\partial{}\", \"\\\\lim_{}{}\",\n    \"\\\\sqrt{}\", \"\\\\sqrt[{}]{}\", \"\\\\log{}\", \"\\\\log_{}{}\", \"\\\\binom{}{}\",\n    \"\\\\sum_{}^{}{}\", \"\\\\prod_{}^{}{}\", \"\\\\int_{}^{}{}\", \"\\\\oint_{}^{}{}\",\n    \"\\\\left({}\\\\right)\", \"\\\\left[{}\\\\right]\", \"\\\\left|{}\\\\right|\",\n    \"\\\\left\\\\lfloor{}\\\\right\\\\rfloor\", \"\\\\left\\\\lceil{}\\\\right\\\\rceil\"\n  ]);\n\n  function splitBranches(tree, ...operators) {\n    const operator = operators[0];\n    let new_tree, tree_flag, len, prev, char;\n\n    for (let branch_index = tree.length - 1; branch >= 0; branch--) {\n      branch = tree[branch_index];\n      if (typeof branch === \"string\") {\n        new_tree = [], tree_flag = false, len = branch.length, prev = len;\n        for (let i = len - 1; i >= 0; i--) {\n          char = branch[i];\n          if (operators.includes(char)) {\n            new_branch.push(char, [], branch.slice(i + 1, prev));\n            new_branch = new_branch[1];\n            prev = i;\n            tree_flag = true;\n          }\n        }\n        if (tree_flag) {\n          tree[branch_index] = new_tree;\n        }\n      } else {\n        tree[branch_index] = splitBranches(branch);\n      }\n    }\n\n    const expr = tree[0], operands = [];\n    let operand_index = tree.length - 1;\n    new_tree = [], tree_flag = false, len = expr.length, prev = len;\n    for (let i = len - 1; i >= 0; i--) {\n      char = expr[i];\n      if (operators.includes(char) && (i > len - 5 || expr.slice(i + 1, i + 5) != \"{}{}\")) {\n        tree_flag = true;\n        new_tree.push(char, [], (operands ? [expr.slice(i + 1, prev), ...operands] : expr.slice(i + 1, prev)));\n        new_tree = new_tree[1];\n        prev = i;\n        operands = [];\n      } else if (char === \"{\") {\n        operands.unshift(tree[operand_index]);\n        operand_index--;\n      }\n    }\n    return (tree_flag ? new_tree : tree)\n  }\n  \n  function generateTree() {\n    const brace_stack = [], tree = [];\n    let expr, brace_pairs, len, operands, last_is_num, last_is_alpha;\n\n    for (let i = 0; i < eq.length; i++) {\n      switch (eq[i]) {\n        case \"{\":\n          brace_stack[brace_stack.length - 1].push(i+1);\n          brace_stack.push([i + 1]);\n\n        case \"}\":\n          expr = \"\";\n          brace_pairs = brace_stack.pop();\n          brace_pairs.push(i);\n          len = brace_pairs.length;\n          operands = len > 2;\n          for (let j = 0; j < len; j+=2) {\n            expr += eq.slice(brace_pairs[j], brace_pairs[j+1]);\n          }\n          \n          // for (let c = 0; c < expr.length; c++) {\n          //   if \n          // }\n\n          if (operands) {\n            tree.splice(-operands, operands, [expr, ...tree.slice(-operands)]);\n          } else {\n            if (!isNaN(expr)) {\n              expr = +expr;\n            }\n            tree.push(expr);\n          }\n          brace_stack[brace_stack.length - 1].push(i);\n      }\n    }\n    \n    tree = splitBranches(tree, \"+\", \"-\");\n    tree = splitBranches(tree, \"\\\\cdot\", \"\\\\div\");\n    tree = splitBranches(tree, \"^\");\n    return tree;\n  }\n\n  function writeLatex(latex, isCmd=false, lcount=0) {\n    const mathField = mathFieldRef?.current?.mathField; \n    if (mathField) {\n      if (isCmd) {\n        mathField.cmd(latex);\n      } else {\n        mathField.typedText(latex);\n      }\n      mathField.keystoke(\"Left \".repeat(lcount));\n      setEq(mathField.latex());\n    }\n  }\n\n  return (\n    <EqContext.Provider \n      value={{ \n        mathFieldRef,\n        writeLatex,\n        eq,\n        setEq\n      }}\n    >\n      {children}\n    </EqContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}