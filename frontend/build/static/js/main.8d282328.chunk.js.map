{"version":3,"sources":["components/EqContext.js","components/Keyboard.js","App.js","reportWebVitals.js","index.js"],"names":["EqContext","createContext","CalcKey","_ref","expr","isCmd","lcount","display","mathFieldRef","writeLatex","eq","setEq","useContext","React","createElement","onClick","StaticMathField","Keyboard","className","id","MathJax","hideUntilTypeset","addStyles","App","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yOAEO,MAAMA,EAAYC,0B,YC6BzB,SAASC,EAAOC,GAA4D,IAA3D,KAAEC,EAAI,MAAEC,GAAQ,EAAK,OAAEC,EAAS,EAAC,QAAEC,GAAqBJ,EACvE,MAAM,aAAEK,EAAY,WAAEC,EAAU,GAAEC,EAAE,MAAEC,GD3B/BC,qBAAWZ,GC6BlB,OACEa,QAAAC,cAAA,UAAQC,QAASA,IAAMN,EAAWL,EAAMC,EAAOC,IAC7CO,QAAAC,cAACE,kBAAe,KAAET,GAAoBH,IAgE7Ba,MA3Df,WACE,OACEJ,QAAAC,cAAA,OAAKI,UAAU,YACbL,QAAAC,cAAA,SAAOK,GAAG,aACRN,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,mBAAoBE,OAAQ,KAC/CO,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,mCAAoCE,OAAQ,KAC/DO,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,oBAAqBE,OAAQ,EAAGC,QAAS,OAAoB,sBAChFM,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,IAAKC,OAAO,MAEjCQ,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,SAAUE,OAAQ,EAAGC,QAAS,SACjDM,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,QAASE,OAAQ,EAAGC,QAAS,SAChDM,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,WAAYE,OAAQ,EAAGC,QAAS,eACnDM,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,aAAcE,OAAQ,EAAGC,QAAS,kBAA+B,uBAEtFM,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,cAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,SAAUE,OAAQ,EAAGC,QAAS,aACjDM,QAAAC,cAAA,UAAID,QAAAC,cAACZ,EAAO,CAACE,KAAM,UAAWE,OAAQ,EAAGC,QAAS,eAA4B,aAAUM,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,kBACvIR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,qBAEjDR,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,kBAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,kBAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,kBAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,wBAGnDR,QAAAC,cAAA,SAAOK,GAAG,WACRN,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,gBAEjDR,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,kBAEjDR,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,YAEjDR,QAAAC,cAAA,UACED,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,WAC/CR,QAAAC,cAAA,UAAID,QAAAC,cAAA,cAAQD,QAAAC,cAACM,IAAO,CAACC,iBAAiB,SAAS,eCtFzDC,sBAyBeC,MAvBf,WACE,OACEV,IAAAC,cAACd,EAAS,KACRa,IAAAC,cAAA,OAAKI,UAAU,OACbL,IAAAC,cAAA,UAAQI,UAAU,cAChBL,IAAAC,cAAA,SAAG,QACID,IAAAC,cAAA,YAAM,cAAiB,wBAE9BD,IAAAC,cAAA,KACEI,UAAU,WACVM,KAAK,sBACLC,OAAO,SACPC,IAAI,uBACL,gBAIHb,IAAAC,cAACG,EAAQ,SCdFU,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAK3B,IAAkD,IAAjD,OAAE4B,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAShC,EACpE4B,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3B,IAAAC,cAACD,IAAM4B,WAAU,KACf5B,IAAAC,cAACS,EAAG,QAORI,K","file":"static/js/main.8d282328.chunk.js","sourcesContent":["import React, { createContext, useContext, useRef, useState } from 'react';\n\nexport const EqContext = createContext();\n\nexport function useEq() {\n  return useContext(EqContext);\n}\n\nexport function EqProvider({ children }) {\n  const mathFieldRef = useRef(null);\n  const [eq, setEq] = useState(\"\");\n\n  const tokens = new Set([\n    \"{}={}\", \"{}\\\\gt{}\", \"{}\\\\ge{}\", \"{}\\\\lt{}\", \"{}\\\\le{}\",\n    \"{}+{}\", \"{}-{}\", \"{}\\\\cdot{}\", \"{}\\\\div{}\", \"{}^{}\", \"{}_{}\", \"{}\\\\to{}\",\n    \"\\\\frac{}{}\", \"\\\\frac{d}{d{}}{}\", \"\\\\partial{}\", \"\\\\lim_{}{}\",\n    \"\\\\sqrt{}\", \"\\\\sqrt[{}]{}\", \"\\\\log{}\", \"\\\\log_{}{}\", \"\\\\binom{}{}\",\n    \"\\\\sum_{}^{}{}\", \"\\\\prod_{}^{}{}\", \"\\\\int_{}^{}{}\", \"\\\\oint_{}^{}{}\",\n    \"\\\\left({}\\\\right)\", \"\\\\left[{}\\\\right]\", \"\\\\left|{}\\\\right|\",\n    \"\\\\left\\\\lfloor{}\\\\right\\\\rfloor\", \"\\\\left\\\\lceil{}\\\\right\\\\rceil\"\n  ]);\n\n  function splitBranches(tree, ...operators) {\n    const operator = operators[0];\n    let new_tree\n    let tree_flag\n    let len\n    let prev\n    let char\n    let new_branch\n    let branch\n\n    for (let branch_index = tree.length - 1; branch >= 0; branch--) {\n      branch = tree[branch_index];\n      if (typeof branch === \"string\") {\n        new_tree = []\n        tree_flag = false\n        len = branch.length\n        prev = len;\n        for (let i = len - 1; i >= 0; i--) {\n          char = branch[i];\n          if (operators.includes(char)) {\n            new_branch.push(char, [], branch.slice(i + 1, prev));\n            new_branch = new_branch[1];\n            prev = i;\n            tree_flag = true;\n          }\n        }\n        if (tree_flag) {\n          tree[branch_index] = new_tree;\n        }\n      } else {\n        tree[branch_index] = splitBranches(branch);\n      }\n    }\n\n    const expr = tree[0]\n    const operands = [];\n    let operand_index = tree.length - 1;\n    new_tree = []\n    tree_flag = false\n    len = expr.length\n    prev = len;\n    for (let i = len - 1; i >= 0; i--) {\n      char = expr[i];\n      if (operators.includes(char) && (i > len - 5 || expr.slice(i + 1, i + 5) != \"{}{}\")) {\n        tree_flag = true;\n        new_tree.push(char, [], (operands ? [expr.slice(i + 1, prev), ...operands] : expr.slice(i + 1, prev)));\n        new_tree = new_tree[1];\n        prev = i;\n        operands = [];\n      } else if (char === \"{\") {\n        operands.unshift(tree[operand_index]);\n        operand_index--;\n      }\n    }\n    return (tree_flag ? new_tree : tree)\n  }\n  \n  // function generateTree() {\n  //   const brace_stack = [], tree = [];\n  //   let expr, brace_pairs, len, operands, last_is_num, last_is_alpha;\n\n  //   for (let i = 0; i < eq.length; i++) {\n  //     switch (eq[i]) {\n  //       case \"{\":\n  //         brace_stack[brace_stack.length - 1].push(i+1);\n  //         brace_stack.push([i + 1]);\n\n  //       case \"}\":\n  //         expr = \"\";\n  //         brace_pairs = brace_stack.pop();\n  //         brace_pairs.push(i);\n  //         len = brace_pairs.length;\n  //         operands = len > 2;\n  //         for (let j = 0; j < len; j+=2) {\n  //           expr += eq.slice(brace_pairs[j], brace_pairs[j+1]);\n  //         }\n\n  //         if (operands) {\n  //           tree.splice(-operands, operands, [expr, ...tree.slice(-operands)]);\n  //         } else {\n  //           if (!isNaN(expr)) {\n  //             expr = +expr;\n  //           }\n  //           tree.push(expr);\n  //         }\n  //         brace_stack[brace_stack.length - 1].push(i);\n  //     }\n  //   }\n    \n  //   tree = splitBranches(tree, \"+\", \"-\");\n  //   tree = splitBranches(tree, \"\\\\cdot\", \"\\\\div\");\n  //   tree = splitBranches(tree, \"^\");\n  //   return tree;\n  // }\n\n  function writeLatex(latex, isCmd=false, lcount=0) {\n    const mathField = mathFieldRef?.current?.mathField; \n    if (mathField) {\n      if (isCmd) {\n        mathField.cmd(latex);\n      } else {\n        mathField.typedText(latex);\n      }\n      mathField.keystoke(\"Left \".repeat(lcount));\n      setEq(mathField.latex());\n    }\n  }\n\n  return (\n    <EqContext.Provider \n      value={{ \n        mathFieldRef,\n        writeLatex,\n        eq,\n        setEq\n      }}\n    >\n      {children}\n    </EqContext.Provider>\n  );\n}\n","import { React } from 'react';\nimport { EditableMathField, StaticMathField } from 'react-mathquill';\nimport { useEq } from './EqContext';\nimport { MathJax } from 'better-react-mathjax';\n\n// function EqInput() {\n//   const { mathFieldRef, writeLatex, eq, setEq } = useEq();\n//   const blacklisted = [\"\\\\\", \" \", \"{\", \"}\"];\n//   const braces = [\"(\", \"[\"];\n\n//   function keyPress(mathField, event) {\n//     const key = event.key;\n//     if (blacklisted.includes(key)) {\n//       event.preventDefault();\n//     }\n//     if (braces.includes(key)) {\n//       mathField.cmd(key);\n//       writeLatex(\"{}\", false, 1);\n//       event.preventDefault;\n//     }\n//     return (\n//       <EditableMathField\n//         ref={mathFieldRef}\n//         latex={eq}\n//         onKeyDown={keyPress}\n//         onChange={(mathField) => { setEq(mathField.latex()) }}\n//       />\n//     )\n//   }\n// }\n\nfunction CalcKey({ expr, isCmd = false, lcount = 0, display = undefined }) {\n  const { mathFieldRef, writeLatex, eq, setEq } = useEq();\n\n  return (\n    <button onClick={() => writeLatex(expr, isCmd, lcount)}>\n      <StaticMathField>{display ? display : expr}</StaticMathField>\n    </button>\n  )\n}\n\nfunction Keyboard() {\n  return (\n    <div className=\"Keyboard\">\n      <table id=\"Operators\">\n        <tr>\n          <td><CalcKey expr={\"\\\\frac{d}{d{}}{}\"} lcount={1}></CalcKey></td>\n          <td><CalcKey expr={\"\\\\frac{\\\\partial}{\\\\partial{}}{}\"} lcount={1}></CalcKey></td>\n          <td><CalcKey expr={\"\\\\left({}\\\\right)\"} lcount={3} display={\"(\"}></CalcKey></td> // test lcount = 2\n          <td><CalcKey expr={\")\"} isCmd={true}></CalcKey></td>\n        </tr>\n        <tr>\n          <td><CalcKey expr={\"{}^{2}\"} lcount={5} display={\"x^2\"}></CalcKey></td>\n          <td><CalcKey expr={\"{}^{}\"} lcount={4} display={\"x^n\"}></CalcKey></td>\n          <td><CalcKey expr={\"\\\\sqrt{}\"} lcount={1} display={\"\\\\sqrt{x}\"}></CalcKey></td>\n          <td><CalcKey expr={\"\\\\sqrt[]{}\"} lcount={3} display={\"\\\\sqrt[n]{x}\"}></CalcKey></td> // test lcount = 2\n        </tr>\n        <tr>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\pi $\"}</MathJax></button></td>\n          <td><CalcKey expr={\"\\\\ln{}\"} lcount={1} display={\"\\\\ln{x}\"}></CalcKey></td>\n          <td><CalcKey expr={\"\\\\log{}\"} lcount={1} display={\"\\\\sqrt{x}\"}></CalcKey></td>          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\log{x} $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\log_n{x} $\"}</MathJax></button></td>\n        </tr>\n        <tr>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\sin{x} $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\cos{x} $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\tan{x} $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\frac{a}{b} $\"}</MathJax></button></td>\n        </tr>\n      </table>\n      <table id=\"Numbers\">\n        <tr>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 7 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 8 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 9 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\div $\"}</MathJax></button></td>\n        </tr>\n        <tr>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 4 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 5 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 6 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ \\\\times $\"}</MathJax></button></td>\n        </tr>\n        <tr>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 1 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 2 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 3 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ - $\"}</MathJax></button></td>\n        </tr>\n        <tr>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ 0 $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ . $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ = $\"}</MathJax></button></td>\n          <td><button><MathJax hideUntilTypeset='first'>{\"$ + $\"}</MathJax></button></td>\n        </tr>\n      </table>\n    </div>\n  )\n}\n\nexport default Keyboard;\n","import './App.css';\nimport React from 'react';\nimport { MathJax, MathJaxContext } from 'better-react-mathjax';\nimport { addStyles } from 'react-mathquill';\nimport Keyboard from './components/Keyboard';\nimport { EqContext } from './components/EqContext'\n\naddStyles();\n\nfunction App() {\n  return (\n    <EqContext>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <Keyboard></Keyboard>\n      </div>\n    </EqContext>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}